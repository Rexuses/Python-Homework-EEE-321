# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'FiBoBinary.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import numpy
from PyQt5 import QtCore, QtGui, QtWidgets
import random

from PyQt5.QtGui import QPixmap
from pyqtgraph import PlotWidget
import pyqtgraph as pg
import SortingLib2



class Ui_FiboBinary(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setObjectName("FiboBinary")
        self.resize(800, 600)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QtCore.QSize(800, 600))
        self.setMaximumSize(QtCore.QSize(800, 600))
        self.setStyleSheet("background-color:#FC3962;")
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(110, 20, 611, 511))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.stackedWidget.setFont(font)
        self.stackedWidget.setObjectName("stackedWidget")
        self.Home = QtWidgets.QWidget()
        self.Home.setObjectName("Home")
        self.Welcome = QtWidgets.QLabel(self.Home)
        self.Welcome.setGeometry(QtCore.QRect(0, 0, 551, 161))
        font = QtGui.QFont()
        font.setFamily("Stencil Std")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.Welcome.setFont(font)
        self.Welcome.setObjectName("Welcome")
        self.intro = QtWidgets.QLabel(self.Home)
        self.intro.setGeometry(QtCore.QRect(0, 360, 391, 61))
        self.intro.setObjectName("intro")
        self.stackedWidget.addWidget(self.Home)
        self.BinarySearch = QtWidgets.QWidget()
        self.BinarySearch.setObjectName("BinarySearch")
        self.UnsortedAr = PlotWidget(self.BinarySearch)
        self.UnsortedAr.setGeometry(QtCore.QRect(250, 60, 321, 191))
        self.UnsortedAr.setStyleSheet("")
        self.UnsortedAr.setObjectName("UnsortedAr")
        self.RandomSorted = QtWidgets.QPushButton(self.BinarySearch)
        self.RandomSorted.setGeometry(QtCore.QRect(20, 150, 181, 41))
        self.RandomSorted.setStyleSheet("QPushButton\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.RandomSorted.setObjectName("RandomSorted")
        self.Searchbut = QtWidgets.QPushButton(self.BinarySearch)
        self.Searchbut.setGeometry(QtCore.QRect(20, 220, 181, 41))
        self.Searchbut.setStyleSheet("QPushButton\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.Searchbut.setObjectName("Searchbut")
        self.BinoResult = QtWidgets.QLabel(self.BinarySearch)
        self.BinoResult.setGeometry(QtCore.QRect(90, 340, 111, 34))
        self.BinoResult.setStyleSheet("QLabel\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.BinoResult.setAlignment(QtCore.Qt.AlignCenter)
        self.BinoResult.setObjectName("BinoResult")
        self.lineEdit = QtWidgets.QLineEdit(self.BinarySearch)
        self.lineEdit.setGeometry(QtCore.QRect(70, 290, 131, 21))
        self.lineEdit.setStyleSheet("QLineEdit\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.BinarySearch)
        self.label.setGeometry(QtCore.QRect(15, 290, 31, 21))
        font = QtGui.QFont()
        font.setFamily("Poplar Std")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: white;")
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(self.BinarySearch)
        self.label_3.setGeometry(QtCore.QRect(15, 340, 51, 21))
        font = QtGui.QFont()
        font.setFamily("Poplar Std")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: white;")
        self.label_3.setObjectName("label_3")
        self.SortedAr = PlotWidget(self.BinarySearch)
        self.SortedAr.setGeometry(QtCore.QRect(250, 320, 321, 191))
        self.SortedAr.setObjectName("SortedAr")
        self.label_4 = QtWidgets.QLabel(self.BinarySearch)
        self.label_4.setGeometry(QtCore.QRect(390, 290, 47, 13))
        self.label_4.setStyleSheet("color :white;")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.BinarySearch)
        self.label_5.setGeometry(QtCore.QRect(380, 30, 47, 13))
        self.label_5.setStyleSheet("color :white;")
        self.label_5.setObjectName("label_5")
        self.stackedWidget.addWidget(self.BinarySearch)
        self.Fibonacci = QtWidgets.QWidget()
        self.Fibonacci.setObjectName("Fibonacci")
        self.Requested = QtWidgets.QLineEdit(self.Fibonacci)
        self.Requested.setGeometry(QtCore.QRect(10, 40, 113, 20))
        self.Requested.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.Requested.setStyleSheet("QLineEdit\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.Requested.setObjectName("Requested")
        self.ReLabel = QtWidgets.QLabel(self.Fibonacci)
        self.ReLabel.setGeometry(QtCore.QRect(10, 10, 121, 21))
        self.ReLabel.setStyleSheet("color: white;")
        self.ReLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.ReLabel.setObjectName("ReLabel")
        self.FiboCal = QtWidgets.QPushButton(self.Fibonacci)
        self.FiboCal.setGeometry(QtCore.QRect(200, 30, 75, 23))
        self.FiboCal.setStyleSheet("QPushButton\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.FiboCal.setObjectName("FiboCal")
        self.RandomFibo = QtWidgets.QPushButton(self.Fibonacci)
        self.RandomFibo.setGeometry(QtCore.QRect(320, 30, 75, 23))
        self.RandomFibo.setStyleSheet("QPushButton\n"
"{\n"
"    color: #fc3962;\n"
"    background-color:#FAF3F5;\n"
"    border-color: #1e1e1e;\n"
"    border-style: solid;\n"
"    border-radius: 6;\n"
"    padding: 3px;\n"
"    font-size: 12px;\n"
"    padding-left: 5px;\n"
"    padding-right: 5px;\n"
"    min-width: 40px;\n"
"}")
        self.RandomFibo.setObjectName("RandomFibo")
        self.FiboResult = QtWidgets.QLabel(self.Fibonacci)
        self.FiboResult.setGeometry(QtCore.QRect(0, 250, 581, 221))
        self.FiboResult.setStyleSheet("color: white;")
        self.FiboResult.setObjectName("FiboResult")
        self.aa = QtWidgets.QLabel(self.Fibonacci)
        self.aa.setGeometry(QtCore.QRect(10, 150, 101, 31))
        self.aa.setStyleSheet("color: white;")
        self.aa.setObjectName("aa")
        self.label_2 = QtWidgets.QLabel(self.Fibonacci)
        self.label_2.setGeometry(QtCore.QRect(10, 220, 71, 21))
        self.label_2.setStyleSheet("color: white;")
        self.label_2.setObjectName("label_2")
        self.ReqNumber = QtWidgets.QLabel(self.Fibonacci)
        self.ReqNumber.setGeometry(QtCore.QRect(120, 150, 101, 31))
        self.ReqNumber.setText("")
        self.ReqNumber.setObjectName("ReqNumber")
        self.stackedWidget.addWidget(self.Fibonacci)
        self.setCentralWidget(self.centralwidget)
        self.bar_drawing = pg.BarGraphItem()
        self.bar_drawing2 = pg.BarGraphItem()
        self.bar_drawing3 = pg.BarGraphItem()
        self.bar_drawing4 = pg.BarGraphItem()
        self.bar_drawing4.setOpts(width=0.90, brush='w', pen='g')
        self.bar_drawing3.setOpts(width=0.90, brush='r', pen='b')
        self.bar_drawing2.setOpts(width=0.90, brush='w', pen='r')
        self.bar_drawing.setOpts(width=0.90, brush='w', pen='g')

        self.manuelEdit = QtWidgets.QLineEdit(self.BinarySearch)
        self.manuelEdit.setGeometry(QtCore.QRect(2, 420, 240, 21))
        self.manuelEdit.setObjectName("manuelEdit")

        self.manuelCal = QtWidgets.QPushButton(self.BinarySearch)
        self.manuelCal.setGeometry(130, 450, 100, 20)
        self.manuelCal.setText("Manuel Array")
        self.manuelCal.clicked.connect(self.ManuelMaker)

        self.retranslateUi(self)
        self.stackedWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.RandomSorted.clicked.connect(self.RandomMaker)
        self.Searchbut.clicked.connect(self.Search)
        self.RandomFibo.clicked.connect(self.Randomize)

        self.katip_image_QLabel = QtWidgets.QLabel(self)
        self.katip_image_QLabel.setGeometry(QtCore.QRect(100, 60, 200, 100))
        self.katip_image_QLabel.setText("")
        self.katip_image_QLabel.setObjectName("katip_image_QLabel")
        # adding image to label
        self.pixmap = QPixmap('katip.png')
        self.katip_image_QLabel.setPixmap(self.pixmap)

        self.backButton = QtWidgets.QPushButton(self)
        self.backButton.setGeometry(QtCore.QRect(0, 5, 30, 23))
        self.backButton.setStyleSheet("background-color:#ffffff; color:#FC3962;")
        self.backButton.setObjectName("backButton")
        self.backButton.setText("Back")
        self.manuelEdit.setStyleSheet("QLineEdit\n"
                                        "{\n"
                                        "    color: #fc3962;\n"
                                        "    background-color:#FAF3F5;\n"
                                        "    border-color: #1e1e1e;\n"
                                        "    border-style: solid;\n"
                                        "    border-radius: 6;\n"
                                        "    padding: 3px;\n"
                                        "    font-size: 12px;\n"
                                        "    padding-left: 5px;\n"
                                        "    padding-right: 5px;\n"
                                        "    min-width: 40px;\n"
                                        "}")
        self.manuelCal.setStyleSheet("QPushButton\n"
                                        "{\n"
                                        "    color: #fc3962;\n"
                                        "    background-color:#FAF3F5;\n"
                                        "    border-color: #1e1e1e;\n"
                                        "    border-style: solid;\n"
                                        "    border-radius: 6;\n"
                                        "    padding: 3px;\n"
                                        "    font-size: 12px;\n"
                                        "    padding-left: 5px;\n"
                                        "    padding-right: 5px;\n"
                                        "    min-width: 40px;\n"
                                        "}")
        self.SortedList = []
    def ManuelMaker(self):
        RandomList = []
        self.SortedList = []
        number = self.manuelEdit.text().split(",")
        for i in range(len(number)):
            number[i] = int(number[i])
            RandomList.append(number[i])
        TempList = []
        TempList.extend(RandomList)

        self.SortedList.extend(SortingLib2.insertion_sort(RandomList))
        self.SortedAr.removeItem(self.bar_drawing3)
        self.SortedAr.removeItem(self.bar_drawing4)
        key = {'x': numpy.arange(len(self.SortedList)) + 1, 'height': numpy.array(self.SortedList)}
        self.bar_drawing.setOpts(**key)
        self.SortedAr.addItem(self.bar_drawing)

        key2 = {'x': numpy.arange(len(TempList)) + 1, 'height': numpy.array(TempList)}
        self.bar_drawing2.setOpts(**key2)
        self.UnsortedAr.addItem(self.bar_drawing2)


    def RandomMaker(self):
        RandomList=[]
        self.SortedList= []
        for i in range(random.randint(5,15)):

            TempNum = random.randint(1,50)

            if TempNum in RandomList:
                continue
            else:
                RandomList.append(TempNum)

        TempList = []
        TempList.extend(RandomList)

        self.SortedList.extend(SortingLib2.insertion_sort(RandomList))
        self.SortedAr.removeItem(self.bar_drawing3)
        self.SortedAr.removeItem(self.bar_drawing4)

        key = {'x': numpy.arange(len(self.SortedList)) + 1, 'height': numpy.array(self.SortedList)}
        self.bar_drawing.setOpts(**key)
        self.SortedAr.addItem(self.bar_drawing)


        key2 = {'x': numpy.arange(len(TempList)) + 1, 'height': numpy.array(TempList)}
        self.bar_drawing2.setOpts(**key2)
        self.UnsortedAr.addItem(self.bar_drawing2)
        self.manuelEdit.setText(str(RandomList))



    def Search(self):
        try:




            a = SortingLib2.binary_search(self.SortedList, int(float(self.lineEdit.text())))
            if a is None:
                self.BinoResult.setText("Key could\n not found")
            else:
                print(a+1)

                self.BinoResult.setText(str(a+1))


                key = {'x': numpy.arange(len(self.SortedList)) +1, 'height': numpy.array(self.SortedList)}
                self.bar_drawing.setOpts(**key)

                key1 = {'x': numpy.arange(a+1)+1 , 'height': numpy.array(self.SortedList)}
                self.bar_drawing3.setOpts(**key1)

                key2 = {'x': numpy.arange(a)+1 , 'height': numpy.array(self.SortedList)}
                self.bar_drawing4.setOpts(**key2)





                self.SortedAr.addItem(self.bar_drawing3)
                self.SortedAr.addItem(self.bar_drawing4)



        except:

            self.BinoResult.setText("Please enter \ninteger values")






    def ShowFibo(self):
        self.stackedWidget.setCurrentWidget(self.Fibonacci)

    def ShowBinary(self):
        self.stackedWidget.setCurrentWidget(self.BinarySearch)

    def Randomize(self):

        first_number = 1
        second_number = 1
        Fibonacci = [first_number, second_number]  # First of all we are making a  list for fibonacci series.

        try:
            requested_number =random.randint(1,20)




            for i in range(1, int(requested_number) - 1):  # Calculation part with for loop
                next_number = Fibonacci[i] + Fibonacci[i - 1]
                Fibonacci.append(next_number)


            self.ReqNumber.setText(str(requested_number))

            self.FiboResult.setText(str(Fibonacci[int(requested_number) - 1]))
        except:
            self.ResultSeries.setText("You have entered a string.Please enter an integer number")


    def retranslateUi(self, FiboBinary):
        _translate = QtCore.QCoreApplication.translate
        FiboBinary.setWindowTitle(_translate("FiboBinary", "Binary search"))
        self.Welcome.setText(_translate("FiboBinary", "Welcome to Fibonacci and \n"
"Binary Search app ."))
        self.intro.setText(_translate("FiboBinary", "Boran Erhan 190403051"))
        self.RandomSorted.setText(_translate("FiboBinary", "Random Sorted Array"))
        self.Searchbut.setText(_translate("FiboBinary", "Search"))
        self.BinoResult.setText(_translate("FiboBinary", "Result"))
        self.label.setText(_translate("FiboBinary", "KEY:"))
        self.label_3.setText(_translate("FiboBinary", "INDEX :"))
        self.label_4.setText(_translate("FiboBinary", "Sorted"))
        self.label_5.setText(_translate("FiboBinary", "Unsorted"))
        self.ReLabel.setText(_translate("FiboBinary", "Requested number"))
        self.FiboCal.setText(_translate("FiboBinary", "Calculate"))
        self.RandomFibo.setText(_translate("FiboBinary", "Random"))
        self.FiboResult.setText(_translate("FiboBinary", "Result"))
        self.aa.setText(_translate("FiboBinary", "Requested number:"))
        self.label_2.setText(_translate("FiboBinary", "Result:"))
from pyqtgraph import PlotWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_FiboBinary()

    ui.show()
    sys.exit(app.exec_())
