# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'batuhan3.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from tkinter import Tk     # from tkinter import Tk for Python 3.x
from tkinter.filedialog import askopenfilename

from PyQt5 import QtCore, QtGui, QtWidgets
from numpy.random import randint
from numpy.random import seed
import csv
import os
import sys
import time
import copy
import random
from timeit import default_timer
import pygame

import QuickSort
from sort import Sort

import pyqtgraph
from PyQt5 import uic, QtCore
from PyQt5.QtWidgets import QMainWindow, QApplication, QFileDialog
import numpy
import matplotlib.pyplot as plt
from pyqtgraph import PlotWidget


class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setObjectName("MainWindow")
        self.resize(1096, 890)
        self.setStyleSheet("background-color:#FC3962;")
        self.central = QtWidgets.QWidget(self)
        self.central.setObjectName("central")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.central)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.canvas_widget = PlotWidget(self.central)
        self.canvas_widget.setMinimumSize(QtCore.QSize(400, 0))
        self.canvas_widget.setStyleSheet("background:#ffffff;")
        self.canvas_widget.setObjectName("canvas_widget")
        self.verticalLayout_5.addWidget(self.canvas_widget)
        self.verticalLayout.addLayout(self.verticalLayout_5)
        self.gridLayout_9 = QtWidgets.QGridLayout()
        self.gridLayout_9.setSizeConstraint(QtWidgets.QLayout.SetMinAndMaxSize)
        self.gridLayout_9.setHorizontalSpacing(7)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.option_group = QtWidgets.QGroupBox(self.central)
        self.option_group.setStyleSheet("color:#ffffff;")
        self.option_group.setAlignment(QtCore.Qt.AlignCenter)
        self.option_group.setObjectName("option_group")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.option_group)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.widget_2 = QtWidgets.QWidget(self.option_group)
        self.widget_2.setObjectName("widget_2")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.widget_2)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.point_btn = QtWidgets.QRadioButton(self.widget_2)
        self.point_btn.setStyleSheet("QRadioButton\n"
                                     "{\n"
                                     "    color: #fc3962;\n"
                                     "    background-color:#FAF3F5;\n"
                                     "    border-color: #1e1e1e;\n"
                                     "    border-style: solid;\n"
                                     "    border-radius: 6;\n"
                                     "    padding: 3px;\n"
                                     "    font-size: 12px;\n"
                                     "    padding-left: 5px;\n"
                                     "    padding-right: 5px;\n"
                                     "    min-width: 40px;\n"
                                     "}")
        self.point_btn.setObjectName("point_btn")
        self.gridLayout_7.addWidget(self.point_btn, 0, 2, 1, 1)
        self.line_btn = QtWidgets.QRadioButton(self.widget_2)
        self.line_btn.setStyleSheet("QRadioButton\n"
                                    "{\n"
                                    "    color: #fc3962;\n"
                                    "    background-color:#FAF3F5;\n"
                                    "    border-color: #1e1e1e;\n"
                                    "    border-style: solid;\n"
                                    "    border-radius: 6;\n"
                                    "    padding: 3px;\n"
                                    "    font-size: 12px;\n"
                                    "    padding-left: 5px;\n"
                                    "    padding-right: 5px;\n"
                                    "    min-width: 40px;\n"
                                    "}")
        self.line_btn.setChecked(True)
        self.line_btn.setObjectName("line_btn")
        self.gridLayout_7.addWidget(self.line_btn, 0, 0, 1, 1)
        self.bar_btn = QtWidgets.QRadioButton(self.widget_2)
        self.bar_btn.setStyleSheet("QRadioButton\n"
                                   "{\n"
                                   "    color: #fc3962;\n"
                                   "    background-color:#FAF3F5;\n"
                                   "    border-color: #1e1e1e;\n"
                                   "    border-style: solid;\n"
                                   "    border-radius: 6;\n"
                                   "    padding: 3px;\n"
                                   "    font-size: 12px;\n"
                                   "    padding-left: 5px;\n"
                                   "    padding-right: 5px;\n"
                                   "    min-width: 40px;\n"
                                   "}")
        self.bar_btn.setObjectName("bar_btn")
        self.gridLayout_7.addWidget(self.bar_btn, 0, 1, 1, 1)
        self.horizontalLayout_13.addWidget(self.widget_2)
        self.gridLayout_9.addWidget(self.option_group, 2, 0, 1, 1)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.shuffle = QtWidgets.QPushButton(self.central)
        self.shuffle.setStyleSheet("QPushButton\n"
                                   "{\n"
                                   "    color: #fc3962;\n"
                                   "    background-color:#FAF3F5;\n"
                                   "    border-color: #1e1e1e;\n"
                                   "    border-style: solid;\n"
                                   "    border-radius: 6;\n"
                                   "    padding: 3px;\n"
                                   "    font-size: 12px;\n"
                                   "    padding-left: 5px;\n"
                                   "    padding-right: 5px;\n"
                                   "    min-width: 40px;\n"
                                   "}")
        self.shuffle.setObjectName("shuffle")
        self.horizontalLayout_6.addWidget(self.shuffle)
        self.start = QtWidgets.QPushButton(self.central)
        self.start.setStyleSheet("QPushButton\n"
                                 "{\n"
                                 "    color: #fc3962;\n"
                                 "    background-color:#FAF3F5;\n"
                                 "    border-color: #1e1e1e;\n"
                                 "    border-style: solid;\n"
                                 "    border-radius: 6;\n"
                                 "    padding: 3px;\n"
                                 "    font-size: 12px;\n"
                                 "    padding-left: 5px;\n"
                                 "    padding-right: 5px;\n"
                                 "    min-width: 40px;\n"
                                 "}")
        self.start.setObjectName("start")
        self.horizontalLayout_6.addWidget(self.start)
        self.pause = QtWidgets.QPushButton(self.central)
        self.pause.setStyleSheet("QPushButton\n"
                                 "{\n"
                                 "    color: #fc3962;\n"
                                 "    background-color:#FAF3F5;\n"
                                 "    border-color: #1e1e1e;\n"
                                 "    border-style: solid;\n"
                                 "    border-radius: 6;\n"
                                 "    padding: 3px;\n"
                                 "    font-size: 12px;\n"
                                 "    padding-left: 5px;\n"
                                 "    padding-right: 5px;\n"
                                 "    min-width: 40px;\n"
                                 "}")
        self.pause.setObjectName("pause")
        self.horizontalLayout_6.addWidget(self.pause)
        self.finish = QtWidgets.QPushButton(self.central)
        self.finish.setStyleSheet("QPushButton\n"
                                  "{\n"
                                  "    color: #fc3962;\n"
                                  "    background-color:#FAF3F5;\n"
                                  "    border-color: #1e1e1e;\n"
                                  "    border-style: solid;\n"
                                  "    border-radius: 6;\n"
                                  "    padding: 3px;\n"
                                  "    font-size: 12px;\n"
                                  "    padding-left: 5px;\n"
                                  "    padding-right: 5px;\n"
                                  "    min-width: 40px;\n"
                                  "}")
        self.finish.setObjectName("finish")
        self.horizontalLayout_6.addWidget(self.finish)
        self.gridLayout_9.addLayout(self.horizontalLayout_6, 9, 0, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.speed = QtWidgets.QLabel(self.central)
        self.speed.setMinimumSize(QtCore.QSize(120, 0))
        self.speed.setStyleSheet("color:#ffffff")
        self.speed.setObjectName("speed")
        self.horizontalLayout_4.addWidget(self.speed)
        self.slider_speed = QtWidgets.QSlider(self.central)
        self.slider_speed.setMinimum(10)
        self.slider_speed.setMaximum(500)
        self.slider_speed.setSingleStep(1)
        self.slider_speed.setPageStep(10)
        self.slider_speed.setProperty("value", 50)
        self.slider_speed.setOrientation(QtCore.Qt.Horizontal)
        self.slider_speed.setObjectName("slider_speed")
        self.horizontalLayout_4.addWidget(self.slider_speed)
        self.gridLayout_9.addLayout(self.horizontalLayout_4, 7, 0, 1, 1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.turn = QtWidgets.QLabel(self.central)
        self.turn.setStyleSheet("color:#ffffff")
        self.turn.setObjectName("turn")
        self.horizontalLayout.addWidget(self.turn)
        self.gridLayout_9.addLayout(self.horizontalLayout, 11, 0, 1, 1)
        self.sort_group = QtWidgets.QGroupBox(self.central)
        self.sort_group.setStyleSheet("color:#ffffff;")
        self.sort_group.setAlignment(QtCore.Qt.AlignCenter)
        self.sort_group.setObjectName("sort_group")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.sort_group)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.widget = QtWidgets.QWidget(self.sort_group)
        self.widget.setObjectName("widget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.selection = QtWidgets.QRadioButton(self.widget)
        self.selection.setStyleSheet("QRadioButton\n"
                                     "{\n"
                                     "    color: #fc3962;\n"
                                     "    background-color:#FAF3F5;\n"
                                     "    border-color: #1e1e1e;\n"
                                     "    border-style: solid;\n"
                                     "    border-radius: 6;\n"
                                     "    padding: 3px;\n"
                                     "    font-size: 12px;\n"
                                     "    padding-left: 5px;\n"
                                     "    padding-right: 5px;\n"
                                     "    min-width: 40px;\n"
                                     "}")
        self.selection.setObjectName("selection")
        self.gridLayout_6.addWidget(self.selection, 6, 1, 1, 1)
        self.merge = QtWidgets.QRadioButton(self.widget)
        self.merge.setStyleSheet("QRadioButton\n"
                                 "{\n"
                                 "    color: #fc3962;\n"
                                 "    background-color:#FAF3F5;\n"
                                 "    border-color: #1e1e1e;\n"
                                 "    border-style: solid;\n"
                                 "    border-radius: 6;\n"
                                 "    padding: 3px;\n"
                                 "    font-size: 12px;\n"
                                 "    padding-left: 5px;\n"
                                 "    padding-right: 5px;\n"
                                 "    min-width: 40px;\n"
                                 "}")
        self.merge.setObjectName("merge")
        self.gridLayout_6.addWidget(self.merge, 5, 1, 1, 1)
        self.shell = QtWidgets.QRadioButton(self.widget)
        self.shell.setStyleSheet("QRadioButton\n"
                                 "{\n"
                                 "    color: #fc3962;\n"
                                 "    background-color:#FAF3F5;\n"
                                 "    border-color: #1e1e1e;\n"
                                 "    border-style: solid;\n"
                                 "    border-radius: 6;\n"
                                 "    padding: 3px;\n"
                                 "    font-size: 12px;\n"
                                 "    padding-left: 5px;\n"
                                 "    padding-right: 5px;\n"
                                 "    min-width: 40px;\n"
                                 "}")
        self.shell.setObjectName("shell")
        self.gridLayout_6.addWidget(self.shell, 7, 0, 1, 1)
        self.quick = QtWidgets.QRadioButton(self.widget)
        self.quick.setStyleSheet("QRadioButton\n"
                                 "{\n"
                                 "    color: #fc3962;\n"
                                 "    background-color:#FAF3F5;\n"
                                 "    border-color: #1e1e1e;\n"
                                 "    border-style: solid;\n"
                                 "    border-radius: 6;\n"
                                 "    padding: 3px;\n"
                                 "    font-size: 12px;\n"
                                 "    padding-left: 5px;\n"
                                 "    padding-right: 5px;\n"
                                 "    min-width: 40px;\n"
                                 "}")
        self.quick.setObjectName("quick")
        self.gridLayout_6.addWidget(self.quick, 6, 0, 1, 1)
        self.insertion = QtWidgets.QRadioButton(self.widget)
        self.insertion.setStyleSheet("QRadioButton\n"
                                     "{\n"
                                     "    color: #fc3962;\n"
                                     "    background-color:#FAF3F5;\n"
                                     "    border-color: #1e1e1e;\n"
                                     "    border-style: solid;\n"
                                     "    border-radius: 6;\n"
                                     "    padding: 3px;\n"
                                     "    font-size: 12px;\n"
                                     "    padding-left: 5px;\n"
                                     "    padding-right: 5px;\n"
                                     "    min-width: 40px;\n"
                                     "}")
        self.insertion.setObjectName("insertion")
        self.gridLayout_6.addWidget(self.insertion, 5, 0, 1, 1)
        self.gnome = QtWidgets.QRadioButton(self.widget)
        self.gnome.setStyleSheet("QRadioButton\n"
                                 "{\n"
                                 "    color: #fc3962;\n"
                                 "    background-color:#FAF3F5;\n"
                                 "    border-color: #1e1e1e;\n"
                                 "    border-style: solid;\n"
                                 "    border-radius: 6;\n"
                                 "    padding: 3px;\n"
                                 "    font-size: 12px;\n"
                                 "    padding-left: 5px;\n"
                                 "    padding-right: 5px;\n"
                                 "    min-width: 40px;\n"
                                 "}")
        self.gnome.setObjectName("gnome")
        self.gridLayout_6.addWidget(self.gnome, 4, 0, 1, 1)
        self.heap = QtWidgets.QRadioButton(self.widget)
        self.heap.setStyleSheet("QRadioButton\n"
                                "{\n"
                                "    color: #fc3962;\n"
                                "    background-color:#FAF3F5;\n"
                                "    border-color: #1e1e1e;\n"
                                "    border-style: solid;\n"
                                "    border-radius: 6;\n"
                                "    padding: 3px;\n"
                                "    font-size: 12px;\n"
                                "    padding-left: 5px;\n"
                                "    padding-right: 5px;\n"
                                "    min-width: 40px;\n"
                                "}")
        self.heap.setObjectName("heap")
        self.gridLayout_6.addWidget(self.heap, 4, 1, 1, 1)
        self.bubble = QtWidgets.QRadioButton(self.widget)
        self.bubble.setStyleSheet("QRadioButton\n"
                                  "{\n"
                                  "    color: #fc3962;\n"
                                  "    background-color:#FAF3F5;\n"
                                  "    border-color: #1e1e1e;\n"
                                  "    border-style: solid;\n"
                                  "    border-radius: 6;\n"
                                  "    padding: 3px;\n"
                                  "    font-size: 12px;\n"
                                  "    padding-left: 5px;\n"
                                  "    padding-right: 5px;\n"
                                  "    min-width: 40px;\n"
                                  "}")
        self.bubble.setObjectName("bubble")
        self.gridLayout_6.addWidget(self.bubble, 3, 1, 1, 1)
        self.bogo = QtWidgets.QRadioButton(self.widget)
        self.bogo.setStyleSheet("QRadioButton\n"
                                "{\n"
                                "    color: #fc3962;\n"
                                "    background-color:#FAF3F5;\n"
                                "    border-color: #1e1e1e;\n"
                                "    border-style: solid;\n"
                                "    border-radius: 6;\n"
                                "    padding: 3px;\n"
                                "    font-size: 12px;\n"
                                "    padding-left: 5px;\n"
                                "    padding-right: 5px;\n"
                                "    min-width: 40px;\n"
                                "}")
        self.bogo.setChecked(True)
        self.bogo.setAutoRepeat(False)
        self.bogo.setObjectName("bogo")
        self.gridLayout_6.addWidget(self.bogo, 3, 0, 1, 1)
        self.gridLayout_3.addWidget(self.widget, 1, 0, 1, 1)
        self.jeuk = QtWidgets.QLabel(self.sort_group)
        self.jeuk.setStyleSheet("color:#ffffff")
        self.jeuk.setAlignment(QtCore.Qt.AlignCenter)
        self.jeuk.setObjectName("jeuk")
        self.gridLayout_3.addWidget(self.jeuk, 0, 0, 1, 1)
        self.gridLayout_9.addWidget(self.sort_group, 1, 0, 1, 1)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.makeuser = QtWidgets.QPushButton(self.central)
        self.makeuser.setStyleSheet("QPushButton\n"
                                    "{\n"
                                    "    color: #fc3962;\n"
                                    "    background-color:#FAF3F5;\n"
                                    "    border-color: #1e1e1e;\n"
                                    "    border-style: solid;\n"
                                    "    border-radius: 6;\n"
                                    "    padding: 3px;\n"
                                    "    font-size: 12px;\n"
                                    "    padding-left: 5px;\n"
                                    "    padding-right: 5px;\n"
                                    "    min-width: 40px;\n"
                                    "}")
        self.makeuser.setObjectName("makeuser")
        self.horizontalLayout_5.addWidget(self.makeuser)
        self.seedQCheckBox = QtWidgets.QCheckBox(self.central)
        self.seedQCheckBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.seedQCheckBox.setStyleSheet("QCheckBox\n"
                                         "{\n"
                                         "    color: #fc3962;\n"
                                         "    background-color:#FAF3F5;\n"
                                         "    border-color: #1e1e1e;\n"
                                         "    border-style: solid;\n"
                                         "    border-radius: 6;\n"
                                         "    padding: 3px;\n"
                                         "    font-size: 12px;\n"
                                         "    padding-left: 5px;\n"
                                         "    padding-right: 5px;\n"
                                         "    min-width: 40px;\n"
                                         "}")
        self.seedQCheckBox.setObjectName("seedQCheckBox")
        self.horizontalLayout_5.addWidget(self.seedQCheckBox)
        self.gridLayout_9.addLayout(self.horizontalLayout_5, 8, 0, 1, 1)
        self.time = QtWidgets.QLabel(self.central)
        self.time.setStyleSheet("color:#ffffff")
        self.time.setObjectName("time")
        self.gridLayout_9.addWidget(self.time, 12, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.array = QtWidgets.QLabel(self.central)
        self.array.setMinimumSize(QtCore.QSize(100, 0))
        self.array.setStyleSheet("color:#ffffff")
        self.array.setObjectName("array")
        self.horizontalLayout_2.addWidget(self.array)
        self.slider_size = QtWidgets.QSlider(self.central)
        self.slider_size.setMinimum(1)
        self.slider_size.setMaximum(1000)
        self.slider_size.setProperty("value", 10)
        self.slider_size.setSliderPosition(10)
        self.slider_size.setTracking(True)
        self.slider_size.setOrientation(QtCore.Qt.Horizontal)
        self.slider_size.setObjectName("slider_size")
        self.horizontalLayout_2.addWidget(self.slider_size)
        self.gridLayout_9.addLayout(self.horizontalLayout_2, 4, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSpacing(3)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.createManualArrayTitleQLabel = QtWidgets.QLabel(self.central)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.createManualArrayTitleQLabel.setFont(font)
        self.createManualArrayTitleQLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.createManualArrayTitleQLabel.setStyleSheet("color:white;")
        self.createManualArrayTitleQLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.createManualArrayTitleQLabel.setObjectName("createManualArrayTitleQLabel")
        self.verticalLayout_2.addWidget(self.createManualArrayTitleQLabel)
        self.createManualArrayLineEdit = QtWidgets.QLineEdit(self.central)
        font = QtGui.QFont()
        font.setPointSize(-1)
        self.createManualArrayLineEdit.setFont(font)
        self.createManualArrayLineEdit.setStyleSheet("QLineEdit\n"
                                                     "{\n"
                                                     "    color: #fc3962;\n"
                                                     "    background-color:#FAF3F5;\n"
                                                     "    border-color: #1e1e1e;\n"
                                                     "    border-style: solid;\n"
                                                     "    border-radius: 6;\n"
                                                     "    padding: 3px;\n"
                                                     "    font-size: 12px;\n"
                                                     "    padding-left: 5px;\n"
                                                     "    padding-right: 5px;\n"
                                                     "    min-width: 40px;\n"
                                                     "}")
        self.createManualArrayLineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.createManualArrayLineEdit.setClearButtonEnabled(False)
        self.createManualArrayLineEdit.setObjectName("createManualArrayLineEdit")
        self.verticalLayout_2.addWidget(self.createManualArrayLineEdit)
        self.createArrayPushButton = QtWidgets.QPushButton(self.central)
        self.createArrayPushButton.setStyleSheet("QPushButton\n"
                                                 "{\n"
                                                 "    color: #fc3962;\n"
                                                 "    background-color:#FAF3F5;\n"
                                                 "    border-color: #1e1e1e;\n"
                                                 "    border-style: solid;\n"
                                                 "    border-radius: 6;\n"
                                                 "    padding: 3px;\n"
                                                 "    font-size: 12px;\n"
                                                 "    padding-left: 5px;\n"
                                                 "    padding-right: 5px;\n"
                                                 "    min-width: 40px;\n"
                                                 "}")
        self.createArrayPushButton.setObjectName("createArrayPushButton")
        self.verticalLayout_2.addWidget(self.createArrayPushButton)
        self.createArrayQLabel = QtWidgets.QLabel(self.central)
        self.createArrayQLabel.setStyleSheet("QLabel\n"
                                             "{\n"
                                             "    color: white;\n"
                                             "    background-color:#FC3962;\n"
                                             "    border-color: #1e1e1e;\n"
                                             "    border-style: solid;\n"
                                             "    border-radius: 6;\n"
                                             "    padding: 3px;\n"
                                             "    font-size: 12px;\n"
                                             "    padding-left: 5px;\n"
                                             "    padding-right: 5px;\n"
                                             "    min-width: 40px;\n"
                                             "}")
        self.createArrayQLabel.setText("")
        self.createArrayQLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.createArrayQLabel.setObjectName("createArrayQLabel")
        self.verticalLayout_2.addWidget(self.createArrayQLabel)
        self.chooseMusicQLabel = QtWidgets.QLabel(self.central)
        self.chooseMusicQLabel.setText("Choose Music")
        self.chooseMusicQLabel.setStyleSheet("QLabel\n"
                                             "{\n"
                                             "    color: white;\n"
                                             "    background-color:#FC3962;\n"
                                             "    border-color: #1e1e1e;\n"
                                             "    border-style: solid;\n"
                                             "    border-radius: 6;\n"
                                             "    padding: 3px;\n"
                                             "    font-size: 12px;\n"
                                             "    padding-left: 5px;\n"
                                             "    padding-right: 5px;\n"
                                             "    min-width: 40px;\n"
                                             "}")
        self.chooseMusicQLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.chooseMusicQLabel.setObjectName("chooseMusicQLabel")
        self.verticalLayout_2.addWidget(self.chooseMusicQLabel)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.selectMusicQPushButton = QtWidgets.QPushButton(self.central)
        self.selectMusicQPushButton.setStyleSheet("QPushButton\n"
                                                  "{\n"
                                                  "    color: #fc3962;\n"
                                                  "    background-color:#FAF3F5;\n"
                                                  "    border-color: #1e1e1e;\n"
                                                  "    border-style: solid;\n"
                                                  "    border-radius: 6;\n"
                                                  "    padding: 3px;\n"
                                                  "    font-size: 12px;\n"
                                                  "    padding-left: 5px;\n"
                                                  "    padding-right: 5px;\n"
                                                  "    min-width: 40px;\n"
                                                  "}")
        self.selectMusicQPushButton.setObjectName("selectMusicQPushButton")
        self.selectMusicQPushButton.setText("Select Music")
        self.horizontalLayout_8.addWidget(self.selectMusicQPushButton)
        self.startMusicQPushButton = QtWidgets.QPushButton(self.central)
        self.startMusicQPushButton.setStyleSheet("QPushButton\n"
                                                 "{\n"
                                                 "    color: #fc3962;\n"
                                                 "    background-color:#FAF3F5;\n"
                                                 "    border-color: #1e1e1e;\n"
                                                 "    border-style: solid;\n"
                                                 "    border-radius: 6;\n"
                                                 "    padding: 3px;\n"
                                                 "    font-size: 12px;\n"
                                                 "    padding-left: 5px;\n"
                                                 "    padding-right: 5px;\n"
                                                 "    min-width: 40px;\n"
                                                 "}")
        self.startMusicQPushButton.setObjectName("startMusicQPushButton")
        self.startMusicQPushButton.setText("Start")
        self.horizontalLayout_8.addWidget(self.startMusicQPushButton)
        self.pauseMusicQPushButton = QtWidgets.QPushButton(self.central)
        self.pauseMusicQPushButton.setStyleSheet("QPushButton\n"
                                                 "{\n"
                                                 "    color: #fc3962;\n"
                                                 "    background-color:#FAF3F5;\n"
                                                 "    border-color: #1e1e1e;\n"
                                                 "    border-style: solid;\n"
                                                 "    border-radius: 6;\n"
                                                 "    padding: 3px;\n"
                                                 "    font-size: 12px;\n"
                                                 "    padding-left: 5px;\n"
                                                 "    padding-right: 5px;\n"
                                                 "    min-width: 40px;\n"
                                                 "}")
        self.pauseMusicQPushButton.setObjectName("pauseMusicQPushButton")
        self.pauseMusicQPushButton.setText("Pause")
        self.horizontalLayout_8.addWidget(self.pauseMusicQPushButton)
        self.resumeMusicQPushButton = QtWidgets.QPushButton(self.central)
        self.resumeMusicQPushButton.setText("Resume")
        self.resumeMusicQPushButton.setStyleSheet("QPushButton\n"
                                      "{\n"
                                      "    color: #fc3962;\n"
                                      "    background-color:#FAF3F5;\n"
                                      "    border-color: #1e1e1e;\n"
                                      "    border-style: solid;\n"
                                      "    border-radius: 6;\n"
                                      "    padding: 3px;\n"
                                      "    font-size: 12px;\n"
                                      "    padding-left: 5px;\n"
                                      "    padding-right: 5px;\n"
                                      "    min-width: 40px;\n"
                                      "}")
        self.resumeMusicQPushButton.setObjectName("pushButton")
        self.horizontalLayout_8.addWidget(self.resumeMusicQPushButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout_8)
        self.gridLayout_9.addLayout(self.verticalLayout_2, 13, 0, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_9)
        self.setCentralWidget(self.central)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.backButton = QtWidgets.QPushButton(self)
        self.backButton.setGeometry(QtCore.QRect(0, 5, 30, 23))
        self.backButton.setStyleSheet("background-color:#ffffff; color:#FC3962;")
        self.backButton.setObjectName("backButton")
        self.backButton.setText("Back")

        # Button binding; Shuffle, Start, Stop
        self.shuffle.clicked.connect(self.shuffle_function)
        self.start.clicked.connect(self.start_function)
        self.pause.clicked.connect(self.pause_function)
        self.makeuser.clicked.connect(lambda: self.userinput_function('search'))

        # Slider binding
        self.slider_speed.valueChanged.connect(self.speed_function)
        self.slider_size.valueChanged.connect(self.size_function)

        # Checkbox binding

        self.point_btn.clicked.connect(lambda: self.option_function('btn'))
        self.line_btn.clicked.connect(lambda: self.option_function('btn'))
        self.bar_btn.clicked.connect(lambda: self.option_function('btn'))

        self.createArrayPushButton.clicked.connect(self.createArray)
        self.finish.clicked.connect(self.finishSorting)
        self.startMusicQPushButton.clicked.connect(lambda: pygame.mixer.music.play())
        self.pauseMusicQPushButton.clicked.connect(lambda: pygame.mixer.music.pause())
        self.resumeMusicQPushButton.clicked.connect(lambda: pygame.mixer.music.unpause())
        self.selectMusicQPushButton.clicked.connect(self.selectMusic)

        # Sort Radiobutton binding
        self.algorithm = ('bogo', 'bubble', 'gnome', 'heap', 'insertion', 'merge', 'quick', 'selection', 'shell')
        for name in self.algorithm:
            getattr(self, name).clicked.connect(self.sort_function)

        self.counter = 0
        self.time_data = [0, 0]  # start, finish
        self.data = [i + 1 for i in range(10)]
        self.history = []

        self.sorting = Sort()
        self.rate = 50

        # Timer
        self.timer = QtCore.QTimer()
        self.timer.setInterval(self.rate)  # default

        # Drawing; canvas
        self.key = 'line'
        self.line_drawing = pyqtgraph.PlotCurveItem()
        self.point_drawing = pyqtgraph.ScatterPlotItem()
        self.bar_drawing = pyqtgraph.BarGraphItem()
        self.highlight_drawing = [pyqtgraph.BarGraphItem() for _ in range(3)]  # r g b
        self.point_drawing.setData(pen=None, symbol='o', symbolPen=None, symbolBrush='w')
        self.bar_drawing.setOpts(width=0.9, brush='w', pen='g')
        self.highlight_drawing[0].setOpts(width=1, brush='r', pen='r')
        self.highlight_drawing[1].setOpts(width=1, brush='g', pen='g')
        self.highlight_drawing[2].setOpts(width=1, brush='b', pen='b')

        # Initial state
        self.array_size = 10  # default
        self.bogo.setChecked(True)
        self.sorting.set_algorithm(self.algorithm[0])
        self.shuffle_function()

        pygame.init()
        pygame.mixer.init()
        self.path = os.getcwd()
        self.path = self.path.replace("\\", "/", )
        pygame.mixer.music.load(self.path + "/Musics/ShingekiNoKyojinMusic.mp3")

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def selectMusic(self):

        Tk().withdraw() # we don't want a full GUI, so keep the root window from appearing
        filename = askopenfilename() # show an "Open" dialog box and return the path to the selected file
        pygame.mixer.music.load(filename)

    def sort_function(self):
        for name in self.algorithm:
            if getattr(self, name).isChecked():
                print(f'main.py; sorting_function; {name}')
                self.sorting.set_algorithm(name)
                pygame.mixer.music.stop()
                return
        print('main.py; sort_function; Error: no checked for radiobutton')

    def shuffle_function(self):
        random.shuffle(self.data)
        self.update_text(array_edit=False, turn_init=True, time_init=True)
        self.draw_scene(self_data=True)

    def start_function(self):
        print('main.py; start_function')
        pygame.mixer.music.play()
        # init
        self.counter = 0
        self.time_data = [time.time(), 0]
        self.canvas_widget.setXRange(0, self.array_size)
        self.canvas_widget.setYRange(0, self.array_size)

        # binding inactive
        self.slider_size.setEnabled(False)
        self.sort_group.setEnabled(False)
        self.option_group.setEnabled(False)
        self.start.setEnabled(False)
        self.shuffle.setEnabled(False)
        self.makeuser.setEnabled(False)

        self.update_text(array_edit=False, turn_init=True, time_init=True)
        print('start_function', self.data)
        self.drawing_function()


    def pause_function(self):
        print('main.py; stop_function')
        pygame.mixer.music.stop()
        # stop getting data
        self.timer.stop()
        self.sorting.clear()

        # binding active
        self.slider_size.setEnabled(True)
        self.sort_group.setEnabled(True)
        self.option_group.setEnabled(True)
        self.start.setEnabled(True)
        self.shuffle.setEnabled(True)
        self.makeuser.setEnabled(True)

    def speed_function(self):
        self.rate = self.slider_speed.value()
        self.speed.setText(f'Speed : {self.rate}ms')
        self.timer.setInterval(self.rate)

    def size_function(self):
        # update by slider_size value
        self.update_text(array_edit=True, turn_init=True, time_init=True)
        # visual
        if self.seedQCheckBox.isChecked():
            seed(1)
            self.data = randint(0, self.array_size + 1, self.array_size).tolist()
        else:
            self.data = [i + 1 for i in range(self.array_size)]
            random.shuffle(self.data)
        self.canvas_widget.setXRange(0, self.array_size)
        self.canvas_widget.setYRange(0, self.array_size)
        self.draw_scene(self_data=True)

    def userinput_function(self, command):
        if command == 'make':
            path = './data'
            if not os.path.isdir(path):
                os.mkdir(path)
            counter = 1
            while os.path.isfile(path + f'/user_input_format{counter}.csv'):
                counter += 1
            with open(path + f'/user_input_format{counter}.csv', 'w', encoding='utf-8', newline='') as f:
                wr = csv.writer(f)
                wr.writerow(['Order', "Data"])
                size = 10
                for i in range(size):
                    wr.writerow([i + 1, size - i])  # TODO
        elif command == 'search':
            path, extension = QFileDialog.getOpenFileName(self, caption='Open File', directory='./data',
                                                          filter='CSV Files(*.csv)')
            if path is None:
                return 0
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    rdr = csv.reader(f)
                    data = []
                    for line in rdr:
                        data.append(line[1])
                    data.pop(0)
                    if not len(data) > 0:
                        raise Exception
                    else:
                        data = [int(x) for x in data]
            except Exception as e:  # TODO - specific
                print(e)
                # TODO - add user alert
                return 0

            # update by slider_size value
            self.data = data
            self.array_size = len(self.data)
            self.slider_size.setValue(min(self.array_size, self.slider_size.maximum()))
            self.array.setText(f'Size : {self.array_size}')
            self.update_text(array_edit=False, turn_init=True, time_init=True)

            # visual
            self.canvas_widget.setXRange(0, self.array_size)
            self.canvas_widget.setYRange(0, self.array_size)
            self.draw_scene(self_data=True)

    def update_text(self, array_edit, turn_init, time_init, time_only=False):
        if time_only:
            self.time_data[1] = time.time()
            self.time.setText(f'Time : {self.time_data[1] - self.time_data[0]}s')
            return
        if array_edit:
            self.array_size = self.slider_size.value()
            self.array.setText(f'Size : {self.array_size}')
        if turn_init:
            self.turn.setText(f'Comparison : 0')
        else:
            self.counter += 1
            self.turn.setText(f'Comparison : {self.counter}')
        if time_init:
            self.time.setText(f'Time : 0s')
        else:
            self.time_data[1] = time.time()
            self.time.setText(f'Time : {round(self.time_data[1] - self.time_data[0], 5)}s')

    def draw_graph(self, data):
        if self.key == 'line':
            key = {'y': numpy.array(data)}
            self.line_drawing.setData(**key)
            self.canvas_widget.clear()
            self.canvas_widget.addItem(self.line_drawing)
        elif self.key == 'point':
            key = {'size': self.point_size(data), 'x': numpy.arange(len(data)), 'y': numpy.array(data)}
            self.point_drawing.setData(**key)
            self.canvas_widget.clear()
            self.canvas_widget.addItem(self.point_drawing)
        elif self.key == 'bar':
            key = {'x': numpy.arange(len(data)) + 0.5, 'height': numpy.array(data)}
            self.bar_drawing.setOpts(**key)
            self.canvas_widget.clear()
            self.canvas_widget.addItem(self.bar_drawing)

    def draw_scene(self, self_data=False):
        if self_data:
            self.draw_graph(self.data)

            return
        ans = self.sorting.get_data()
        if ans == (None, None, None):
            self.update_text(False, False, False, time_only=True)
            return
        elif ans == 'finish':
            self.pause_function()

        else:
            self.update_text(array_edit=False, turn_init=False, time_init=False)
            self.sorting_command(ans)

    def sorting_command(self, commands):
        change, highlight, data = commands
        if data is not None:
            if data != 'stay':
                self.data = data
            self.draw_graph(self.data)
        elif change is not None:  # elif!
            for i, j in change:
                self.data[i], self.data[j] = self.data[j], self.data[i]
            self.draw_graph(self.data)
        if self.key == 'bar' and highlight is not None:
            color = [[], [], []]  # r g b
            for x_, color_ in highlight:
                color['rgb'.index(color_)].append(x_)
            # print(color)
            for i in [1, 2, 0]:  # r g b draw order
                key = {'x': numpy.array(color[i]) + 0.5, 'height': numpy.array([self.data[x] for x in color[i]])}
                self.highlight_drawing[i].setOpts(**key)
                self.canvas_widget.addItem(self.highlight_drawing[i])
            # print('processing...')

    def drawing_function(self):
        self.sorting.sort(self.data)
        self.timer = QtCore.QTimer()
        self.timer.setInterval(self.rate)  # just initial
        self.timer.timeout.connect(self.draw_scene)
        self.timer.start()


    def option_function(self, command):
        if command == 'btn':
            if self.line_btn.isChecked():
                self.key = 'line'
                self.draw_scene(self_data=True)
            elif self.point_btn.isChecked():
                self.key = 'point'
                self.draw_scene(self_data=True)
            elif self.bar_btn.isChecked():
                self.key = 'bar'
                self.draw_scene(self_data=True)

    def point_size(self, data):
        p = len(data)
        if p > 600:
            return 3
        elif p > 400:
            return 5
        elif p > 200:
            return 7
        elif p > 100:
            return 9
        elif p > 50:
            return 11
        else:
            return 14

    def createArray(self):
        list = self.arrayStringToInteger(self.createManualArrayLineEdit.text().split(","))
        if (list != False):
            if (len(list) <= 1):
                self.createArrayQLabel.setText("Please enter at least 2 numbers.")
            else:
                self.slider_size.setValue(len(list))
                self.data = list
                self.update_text(array_edit=True, turn_init=True, time_init=True)
                # visual
                self.canvas_widget.setXRange(0, self.array_size)
                self.canvas_widget.setYRange(min(self.data), max(self.data))
                self.draw_scene(self_data=True)
                self.createArrayQLabel.setText("")

    def arrayStringToInteger(self, list):
        for i in range(len(list)):
            try:
                list[i] = int(list[i])
            except:
                self.createArrayQLabel.setText("Please enter integer numbers.\nPut comma(,) between numbers.")
                return False
        return list

    def finishSorting(self):
        print('main.py; finish_function')
        # init
        self.canvas_widget.setXRange(0, self.array_size)
        self.canvas_widget.setYRange(0, self.array_size)
        # binding inactive
        self.slider_size.setEnabled(False)
        self.sort_group.setEnabled(False)
        self.option_group.setEnabled(False)
        self.start.setEnabled(False)
        self.shuffle.setEnabled(False)
        self.makeuser.setEnabled(False)

        self.update_text(array_edit=False, turn_init=True, time_init=True)
        QuickSort.quick_sort(self.data, 0, len(self.data) - 1)
        self.draw_graph(self.data)

        self.slider_size.setEnabled(True)
        self.sort_group.setEnabled(True)
        self.option_group.setEnabled(True)
        self.start.setEnabled(True)
        self.shuffle.setEnabled(True)
        self.makeuser.setEnabled(True)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sorting Simulation"))
        self.sort_group.setTitle(_translate("MainWindow", "Sorting algorithm"))
        self.selection.setText(_translate("MainWindow", "Selection"))
        self.merge.setText(_translate("MainWindow", "Merge"))
        self.shell.setText(_translate("MainWindow", "Shell"))
        self.quick.setText(_translate("MainWindow", "Quick"))
        self.insertion.setText(_translate("MainWindow", "Insertion"))
        self.gnome.setText(_translate("MainWindow", "Gnome"))
        self.heap.setText(_translate("MainWindow", "Heap"))
        self.bubble.setText(_translate("MainWindow", "Bubble"))
        self.bogo.setText(_translate("MainWindow", "Bogo"))
        self.jeuk.setText(_translate("MainWindow", "Batuhan Beel 180403031"))
        self.turn.setText(_translate("MainWindow", "Turn :"))
        self.array.setText(_translate("MainWindow", "Size : 10"))
        self.makeuser.setText(_translate("MainWindow", "Make User Data File"))
        self.seedQCheckBox.setText(_translate("MainWindow", "Seed"))
        self.speed.setText(_translate("MainWindow", "Speed : 50ms"))
        self.time.setText(_translate("MainWindow", "Time :"))
        self.option_group.setTitle(_translate("MainWindow", "Visualization"))
        self.point_btn.setText(_translate("MainWindow", "Point"))
        self.line_btn.setText(_translate("MainWindow", "Line"))
        self.bar_btn.setText(_translate("MainWindow", "Bar"))
        self.shuffle.setText(_translate("MainWindow", "Shuffle"))
        self.start.setText(_translate("MainWindow", "Start"))
        self.pause.setText(_translate("MainWindow", "Pause"))
        self.finish.setText(_translate("MainWindow", "Finish"))
        self.createManualArrayTitleQLabel.setText(_translate("MainWindow", "Create Manual Array"))
        self.createManualArrayLineEdit.setPlaceholderText(_translate("MainWindow", "Enter Integer Numbers"))
        self.createArrayPushButton.setText(_translate("MainWindow", "Create Array"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())
